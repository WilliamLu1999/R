install.packages(c("shiny", "shinythemes", "data.table", "RCurl", "randomForest"))
library(datasets)
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
weather <- read.csv(text=getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv"))
# play is the output variable, . represent the 4 input variables
model <- randomForest(play ~ ., data=weather,ntree=500,mtry=4,importance=TRUE)
library(randomForest)
# play is the output variable, . represent the 4 input variables
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
weather <- read.csv(text=getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv"))
# play is the output variable, . represent the 4 input variables
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
library(datasets)
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
weather <- read.csv(text=getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv"))
# play is the output variable, . represent the 4 input variables
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# play is the output variable, . represent the 4 input variables
weather$play <- as.factor(weather$play)
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('untitled folder')
runApp('untitled folder')
runApp('untitled folder')
runApp('untitled folder')
runApp('untitled folder')
# Assuming 'data' is your dataframe and 'target' is the name of the response variable
trainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE)
install.packages("caret", dependencies = TRUE)
# install.packages("caret", dependencies = TRUE)
library(randomForest)
library(caret)
data(iris)
set.seed(123)  # for reproducibility
# Assuming 'data' is your dataframe and 'target' is the name of the response variable
trainIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE)
trainData <- iris[trainIndex, ]
testData <- iris[-trainIndex, ]
# Set up cross-validation
train_control <- trainControl(method = "cv", number = 10, savePredictions = "final")
# Train the model with parameter tuning
tuned_model <- train(Species ~ ., data = trainData, method = "rf",
trControl = train_control,
tuneLength = 10)  # tuneLength controls the number of different parameter sets to try
# Model summary
print(tuned_model)
# Make predictions and evaluate the model
predictions <- predict(tuned_model, testData)
confusionMatrix(predictions, testData$Species)
runApp('project3')
